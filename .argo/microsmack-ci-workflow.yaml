apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: microsmack-ci-template
  namespace: microsmack
spec:
  entrypoint: build-and-deploy
  templates:
    - name: build-and-deploy
      dag:
        tasks:
          - name: build-api
            template: kaniko-build-api
          - name: build-web
            template: kaniko-build-web
          - name: deploy-api
            template: kubectl-apply-api
            dependencies: [build-api]
          - name: deploy-web
            template: kubectl-apply-web
            dependencies: [build-web]

    # Kaniko build API
    - name: kaniko-build-api
      container:
        image: gcr.io/kaniko-project/executor:debug
        command: [sh, -c]
        args:
          - |
            echo "Files in /workspace:" && ls -R /workspace && \
            /kaniko/executor \
              --dockerfile=/workspace/smackapi/Dockerfile \
              --context=/workspace \
              --destination=docker.io/992220449/smackapi:latest \
              --cache=true
        envFrom:
          - secretRef:
              name: docker-credentials
        volumeMounts:
          - name: repo
            mountPath: /workspace
          - name: docker-config
            mountPath: /kaniko/.docker
            readOnly: true
      initContainers:
        - name: git-clone
          image: alpine/git
          command: ["sh", "-c"]
          args:
            - git clone --depth=1 --branch main https://github.com/Zeta201/smack.git /workspace
          volumeMounts:
            - name: repo
              mountPath: /workspace

    # Kaniko build Web
    - name: kaniko-build-web
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - --dockerfile=Dockerfile          # Notice: relative to context now
          - --context=/workspace/web          # Changed context to /workspace/web
          - --destination=docker.io/992220449/smackweb:latest
          - --cache=true
        envFrom:
          - secretRef:
              name: docker-credentials
        volumeMounts:
          - name: repo
            mountPath: /workspace
          - name: docker-config
            mountPath: /kaniko/.docker
            readOnly: true
      initContainers:
        - name: git-clone
          image: alpine/git
          command: ["sh", "-c"]
          args:
            - git clone --depth=1 --branch main https://github.com/Zeta201/smack.git /workspace
          volumeMounts:
            - name: repo
              mountPath: /workspace

        

    # Deploy API
    - name: kubectl-apply-api
      container:
        image: bitnami/kubectl:latest
        command: [sh, -c]
        args:
          - |
            kubectl apply -f /workspace/kubernetes/smackapi-deployment.yaml -n microsmack && \
            kubectl apply -f /workspace/kubernetes/smackapi-service.yaml -n microsmack
        volumeMounts:
          - name: repo
            mountPath: /workspace
      initContainers:
        - name: git-clone
          image: alpine/git
          command: ["sh", "-c"]
          args:
            - git clone --depth=1 --branch main https://github.com/Zeta201/smack.git /workspace
          volumeMounts:
            - name: repo
              mountPath: /workspace

    # Deploy Web
    - name: kubectl-apply-web
      container:
        image: bitnami/kubectl:latest
        command: [sh, -c]
        args:
          - |
            kubectl apply -f /workspace/kubernetes/web-deployment.yaml -n microsmack && \
            kubectl apply -f /workspace/kubernetes/web-service.yaml -n microsmack
        volumeMounts:
          - name: repo
            mountPath: /workspace
      initContainers:
        - name: git-clone
          image: alpine/git
          command: ["sh", "-c"]
          args:
            - git clone --depth=1 --branch main https://github.com/Zeta201/smack.git /workspace
          volumeMounts:
            - name: repo
              mountPath: /workspace

  volumes:
    - name: repo
      emptyDir: {}
    - name: docker-config
      secret:
        secretName: docker-credentials
        items:
          - key: .dockerconfigjson
            path: config.json
